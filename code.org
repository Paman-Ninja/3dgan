* Data
** Imports
#+begin_src python :tangle data.py
import h5py, sys
#+end_src
** Datasets
#+begin_src python :tangle data.py
class Dataset:
    def __init__(self, dataset):
        self.dataset = dataset[()]
        # self.dataset = cv.cvtColor(self.dataset, cv.COLOR_BGR2GRAY)
        self.current_pos = 0
        self.num_examples = len(dataset)

    def next_batch(self, batch_size):
        if self.current_pos + batch_size > self.num_examples:
            self.current_pos = 0
        x = self.dataset[self.current_pos : self.current_pos+batch_size]
        self.current_pos += batch_size
        # return (x, None)
        return (x, None)
        # return (np.reshape(x, (batch_size, 64*64*3)), None)


class Floorplans:
    def __init__(self, root_dir='/mnt/research/datasets/floorplans/'):
        # self.test = Dataset(os.path.join(root_dir, 'test_set.txt'))
        # self.train = Dataset(os.path.join(root_dir, 'train_set.txt'))
        # self.validation = Dataset(os.path.join(root_dir, 'validation_set.txt'))
        self.file = h5py.File("/mnt/research/projects/hem/datasets/floorplan_64_float32.hdf5", 'r')
        # sys.stdout.write("Loading test...")
        # sys.stdout.flush()
        self.test = Dataset(self.file['test/images'])
        # sys.stdout.write("done!\n\rLoading train...")
        # sys.stdout.flush()
        self.train = Dataset(self.file['train/images'])
        # sys.stdout.write("done!\n\rLoading validation...")
        # sys.stdout.flush()
        self.validation = Dataset(self.file['validation/images'])
        # sys.stdout.write("done!\n\r")
        # sys.stdout.flush()

        # print(self.train, self.test, self.validation)

#+end_src

* Models
** Imports
#+begin_src python :tangle models.py
import tensorflow as tf
#+end_src  
** Fully Connected
#+begin_src python :tangle models.py
def _fc_layer(x, x_size, y_size):
    W = tf.Variable(tf.random_normal([x_size, y_size]))
    b = tf.Variable(tf.random_normal([y_size]))
    return tf.nn.sigmoid(tf.add(tf.matmul(x, W), b))


def simple_fc(x, layer_sizes):
    orig_shape = list(x.get_shape())
    # print(x)
    # print(orig_shape)

    # flatten
    x = tf.contrib.layers.flatten(x)
    flattened_size = int(list(x.get_shape())[1])
    
    # x = tf.reshape(x, [-1])
    # print(x)
    print('input layer:', x, x.get_shape())

    # encoder
    for size in layer_sizes:
        s = int(list(x.get_shape())[1])
        x = _fc_layer(x, s, size)
        print('encoder:', x, x.get_shape())

    # decoder
    layer_sizes = reversed(layer_sizes[1:])
    for size in layer_sizes:
        s = int(list(x.get_shape())[1])
        x = _fc_layer(x, s, size)
        print('decoder:', x, x.get_shape())

     
    x = _fc_layer(x, int(list(x.get_shape())[1]), flattened_size)
                      
                      
    print('final layer:', x, x.get_shape())

    # unflatten
    l = list(orig_shape)[1:]
    l = [-1, int(l[0]), int(l[1]), int(l[2])]
    print('reshape:', l)
    x = tf.reshape(x, l)

    return x
#+end_src
** Convolutional
#+begin_src python :tangle models.py
def _cnn_layer(x, x_size, y_size):
    # 64x64x1 > 64x64x64 > 32x32x128 > 16x16x256 < 32x32x128 < 64x64x64 < 64x64x1
    K = tf.Variable(tf.truncated_normal([3, 3, x_size, y_size], stddev=0.1))
    l = tf.nn.conv2d(x, K, strides=[1, 1, 1, 1], padding='SAME')
    # l = tf.nn.max_pool(l, [1, 2, 2, 1], [1, 2, 2, 1], padding='SAME')
    return l

def simple_cnn(x, layer_sizes):
    orig_shape = list(x.get_shape())

    print('i)', x.get_shape())

    # encoder
    with tf.variable_scope('encoder'):
        for size in layer_sizes:
            s = int(list(x.get_shape())[3])
            K = tf.Variable(tf.truncated_normal([3, 3, s, size], stddev=0.1))
            x = tf.nn.conv2d(x, K, strides=[1, 1, 1, 1], padding='SAME')
            x = tf.nn.max_pool(x, [1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME')
            x = tf.nn.relu(x)
            print('e)', x.get_shape())
            # x = _cnn_layer(x, s, size)

    # decoder
    with tf.variable_scope('decoder'):
        layer_sizes = reversed(layer_sizes)
        for size in layer_sizes:
            s = int(list(x.get_shape())[3])
            K = tf.Variable(tf.truncated_normal([3, 3, s, size], stddev=0.1))
            os = [-1] + list(x.get_shape())[1:]
            os = [os[0], int(os[1])*2, int(os[2])*2, size]
            # print('GET SHAPE:', os)
            x = tf.nn.conv2d_transpose(x, K, output_shape=os, strides=[1, 1, 1, 1], padding='SAME')
            x = tf.nn.relu(x)
            # x = _cnn_layer(x, s, size)
            print('d)', x.get_shape())

        s = int(list(x.get_shape())[3])
        size = int(orig_shape[3])
        K = tf.Variable(tf.truncated_normal([3, 3, s, size], stddev=0.1))

        os = [-1] + list(x.get_shape())[1:]
        os = [os[0], int(os[1])*2, int(os[2])*2, int(os[3])]
        # print('GET SHAPE:', os)
        x = tf.nn.conv2d_transpose(x, K, output_shape=os, strides=[1, 1, 1, 1], padding='SAME')
        x = tf.nn.relu(x)
        print('o)', x.get_shape())
        # x = tf.nn.conv2d(x, K, strides=[1, 1, 1, 1], padding='SAME')
            
            
        # x = _cnn_layer(x, i, i)
        
    return x
#+end_src

* Utility
** Imports
#+begin_src python :tangle util.py
import numpy as np
import tensorflow as tf
import os
import sys
import cv2
from data import Floorplans
#+end_src
** Logging
#+begin_src python :tangle util.py
# helper functions
def generate_example_row(data, tensor, xs, include_actual, sess, x):
    examples = sess.run(tensor, feed_dict={x: xs})
    montage = None
    for i, pred in enumerate(examples):
        if include_actual:
            # v = np.vstack((np.reshape(data.test.images[i], (28, 28)) * 255.0,
            #                np.reshape(pred, (28, 28)) * 255.0))
            # v = np.vstack((np.reshape(data.test.dataset[i], (64, 64, 3)) * 255.0,
            #                np.reshape(pred, (64, 64, 3)) * 255.0))
            gray_img = data.test.dataset[i]
            # gray_img = cv2.cvtColor(data.test.dataset[i], cv2.COLOR_BGR2GRAY)
            # v = np.vstack((gray_img * 255.0,
            #                np.reshape(pred, (64, 64)) * 255.0))
            v = np.vstack((gray_img * 255.0, pred * 255.0))
            # v = np.vstack((np.reshape(data.test.dataset[i], (64, 64)) * 255.0,
            #                np.reshape(pred, (64, 64)) * 255.0))
        else:
            # v = np.reshape(pred, (28, 28)) * 255.0
            # v = np.reshape(pred, (64, 64, 3)) * 255.0
            v = pred * 255.0
            # v = np.reshape(pred, (64, 64)) * 255.0

        montage = v if montage is None else np.hstack((montage, v))
    return montage


def print_progress(epoch, completed, total, loss):
    sys.stdout.write('\r')
    sys.stdout.write('Epoch {:03d}: {:05d}/{:05d}: {:.4f}'.format(epoch, completed, total, loss))
    sys.stdout.flush()


def get_dataset(name):
    print('Loading dataset...')
    if name == 'mnist':
        from tensorflow.examples.tutorials.mnist import input_data
        return input_data.read_data_sets("data/MNIST_data", one_hot=True)
    elif name == 'floorplan':
        return Floorplans()


def prep_workspace(dirname):
    subdirs = [os.path.join(dirname, "checkpoints"),
               os.path.join(dirname, "images"),
               os.path.join(dirname, "logs")]
    if not os.path.exists(dirname):
        os.makedirs(dirname)
    for d in subdirs:
        if not os.path.exists(d):
            os.mkdir(d)
            
    return {'train_loss': open(os.path.join(dirname, "logs", "train_loss.csv"), 'a'),
            'validate_loss': open(os.path.join(dirname, "logs", "validate_loss.csv"), 'a'),
            'test_loss' : open(os.path.join(dirname, "logs", "test_loss.csv"), 'a')}


def plot_loss(image_dir):
    pass
#+end_src

* Callbacks
** Logging
** Inference

* Main
** Imports
#+begin_src python :tangle main.py
import tensorflow as tf, numpy as np, matplotlib.pyplot as plt
import sys, random, argparse, os, uuid, pickle, h5py, cv2
# from models import test
from models import simple_fc, simple_cnn
from msssim import MultiScaleSSIM, tf_ssim, tf_ms_ssim
from data import Floorplans
from util import *
#+end_src

** Args
#+begin_src python :tangle main.py
parser = argparse.ArgumentParser()
parser.add_argument('--epochs', type=int, default=3)
parser.add_argument('--batchsize', type=int, default=256)
parser.add_argument('--examples', type=int, default=10)
parser.add_argument('--lr', type=float, default=0.01)
parser.add_argument('--layers', type=int, nargs='+', default=(512, 256, 128))
parser.add_argument('--seed', type=int, default=os.urandom(4))
parser.add_argument('--dataset', type=str, default='mnist')
parser.add_argument('--dir', type=str, default='workspace/{}'.format(uuid.uuid4()))
parser.add_argument('--resume', default=False, action='store_true')
parser.add_argument('--interactive', default=False, action='store_true')
parser.add_argument('--model', type=str, default='fc')
parser.add_argument('--grayscale', default=False, action='store_true')
args = parser.parse_args()
#+end_src
** Setup
#+begin_src python :tangle main.py
# for repeatability purposes
random.seed(args.seed)

# model
sess = tf.Session()
# x = tf.placeholder("float", [None, 64, 64, 3])
x = tf.placeholder("float", [None, 64, 64, 3])
if args.grayscale:
    x = tf.image.rgb_to_grayscale(x)
    
if args.model == 'fc':
    y_hat = simple_fc(x, args.layers)
elif args.model == 'cnn':
    y_hat = simple_cnn(x, args.layers)

# dataset
data = get_dataset(args.dataset)

    

# loss_l1 = tf.reduce_mean(tf.abs(x - y_hat))
# loss_l2 = tf.reduce_mean(tf.pow(tf.reshape(tf.image.rgb_to_grayscale(x), (-1, 64*64)) - y_hat, 2))
loss_l2 = tf.reduce_mean(tf.pow(x - y_hat, 2))
# loss_l2 = tf.reduce_mean(tf.pow(x - y_hat, 2))
# loss_rmse = tf.sqrt(tf.reduce_mean(tf.pow(x - y_hat, 2)))
# def l(actual, pred):
#     x = tf.image.rgb_to_grayscale(tf.reshape(actual, (-1, 64, 64)))
#     y_hat = tf.image.rgb_to_grayscale(tf.reshape(pred, (-1, 64, 64)))
#     return tf.reduce_mean(tf.abs(x - y_hat))
    
loss = loss_l2
    
# loss = tf_ssim(tf.reshape(x, (-1, 64, 64, 3)), tf.reshape(y_hat, (-1, 64, 64, 3)))
# tf_ssim
# tf_ms_ssim

optimizer = tf.train.RMSPropOptimizer(args.lr).minimize(loss)
global_step = tf.Variable(0, name='global_step', trainable=False)
global_epoch = tf.Variable(1, name='global_epoch', trainable=False)

saver = tf.train.Saver()
sess.run(tf.global_variables_initializer())
    
montage = None

if args.resume:
    #saver = tf.train.import_meta_graph(os.path.join(args.dir, 'model'))
    saver.restore(sess, tf.train.latest_checkpoint(os.path.join(args.dir, 'checkpoints')))
    print('Model restored. Global step:', sess.run(global_step))
        
# workspace
log_files = prep_workspace(args.dir)
if not args.resume:
    pickle.dump(args, open(os.path.join(args.dir, 'settings'), 'wb'))
    tf.train.export_meta_graph(os.path.join(args.dir, 'model'))



#+end_src
** Training
#+begin_src python :tangle main.py
start_epoch = sess.run(global_epoch)
for epoch in range(start_epoch, args.epochs+start_epoch):
    # perform training
    n_trbatches = int(data.train.num_examples/args.batchsize)
    completed = 0
    total_train_loss = 0.0
    for i in range(n_trbatches):
        xs, ys = data.train.next_batch(args.batchsize)
        _, l = sess.run([optimizer, loss], feed_dict={x: xs})
        total_train_loss += l
        completed += args.batchsize
        sess.run(global_step.assign(completed + (epoch-1)*(n_trbatches*args.batchsize)))
        log_files['train_loss'].write('{:05d},{:.5f}\n'.format(completed + (epoch-1)*(n_trbatches*args.batchsize), l))
        if args.interactive:
            print_progress(epoch, completed, data.train.num_examples, l)
    if not args.interactive:
        print('Epoch {}: Train loss ({:.5f})'.format(epoch, total_train_loss/n_trbatches))

    # perform validation
    n_valbatches = int(data.validation.num_examples/args.batchsize)
    vl = 0.0
    for i in range(n_valbatches):
        xs, ys = data.validation.next_batch(args.batchsize)
        vl += sess.run(loss, feed_dict={x: xs})
    log_files['validate_loss'].write('{:05d},{:.5f}\n'.format(completed + (epoch-1)*(n_trbatches*args.batchsize), vl/n_valbatches))
    if args.interactive:
        sys.stdout.write(', validation: {:.4f}'.format(vl/n_valbatches))
        sys.stdout.write('\r\n')
    else:
        print('Epoch {}: Validation loss ({:.5f})'.format(epoch, vl/n_valbatches))

    # montage
    if args.interactive:
        sys.stdout.write('Generating examples to disk...')
    else:
        print('Generating examples to disk...')
    # TODO: should reshape this on the fly, and only if necessary
    examples = data.test.dataset[:args.examples]
    # tf.reshape(tf.image.rgb_to_grayscale(x), (-1, 64*64))
        
    # examples = np.reshape(examples, (args.examples, 64*64*3))
    # examples = np.reshape(examples, (args.examples, 64*64))
    # examples = tf.image
    row = generate_example_row(data, y_hat, examples, epoch==1, sess, x)
    imgfile = os.path.join(args.dir, 'images', 'montage_{:03d}.png'.format(epoch))
    cv2.imwrite(imgfile, row)
    montage = row if montage is None else np.vstack((montage, row))
    if args.interactive:
        sys.stdout.write('complete!\r\n')
        sys.stdout.flush()

    sess.run(global_epoch.assign(epoch+1))
        
    # snapshot
    if args.interactive:
        sys.stdout.write('Writing snapshot to disk...')
    else:
        print('Writing snapshot to disk...')
    chkfile = os.path.join(args.dir, 'checkpoints', 'epoch_{:03d}.ckpt'.format(epoch))
    saver.save(sess, chkfile, global_step=global_step)
    if args.interactive:
        sys.stdout.write('complete!\r\n')
        sys.stdout.flush()
#+end_src
** Testing
#+begin_src python :tangle main.py
# save complete montage
cv2.imwrite(os.path.join(args.dir, 'images', 'montage.png'), montage)
    
# perform test
n_tebatches = int(data.test.num_examples/args.batchsize)
tel = 0.0
completed = 0
for i in range(n_tebatches):
    xs, ys = data.test.next_batch(args.batchsize)
    tel += sess.run(loss, feed_dict={x: xs})
    completed += args.batchsize
    if args.interactive:
        sys.stdout.write('\r')
        sys.stdout.write('test: {:.4f}'.format(l))
        sys.stdout.flush()
log_files['test_loss'].write('{:05d},{:.5f}\n'.format((epoch) * n_trbatches * args.batchsize, tel/n_tebatches))
if args.interactive:
    sys.stdout.write('\r\n')
else:
    print('Test loss: {:.5f}'.format(tel/n_tebatches))

# close down log files
for key in log_files:
    log_files[key].close()

# generate charts
train_loss = np.genfromtxt(os.path.join(args.dir, "logs", "train_loss.csv"), delimiter=',')
test_loss = np.genfromtxt(os.path.join(args.dir, "logs", "test_loss.csv"), delimiter=',')
validate_loss = np.genfromtxt(os.path.join(args.dir, "logs", "validate_loss.csv"), delimiter=',')
plt.rc('text', usetex=True)
plt.rc('font', **{'family':'serif','serif':['Palatino']})
for x in [(train_loss, {}), (validate_loss, {'color': 'firebrick'})]:
    data, plot_args = x
    iters = data[:,[0]]
    vals = data[:,[1]]
    plt.plot(iters, vals, **plot_args)
    plt.xlabel('Iteration')
    plt.ylabel(r'$\ell_1$ Loss')
plt.savefig(os.path.join(args.dir, "images", "loss.pdf"))
#+end_src
